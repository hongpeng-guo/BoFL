import gurobipy as gp
from gurobipy import GRB
from getPareto import get_Pareto
import numpy as np
import scipy.sparse as sp
import json
from time import time

def load_json(file):
    with open(file) as f:
        data = json.load(f)
    return {tuple([int(i) for i in key.split(',')]): tuple(value) for key, value in data.items()}


def getParetos(observations):

    observations = sorted(observations)
    pareto = [observations[0]]

    for i in range(1, len(observations)):
        if observations[i][1] < pareto[-1][1]:
            pareto.append(observations[i])

    return pareto


def exploitOpt(observations, workload, ddl):

    pareto = getParetos(observations)
    pareto, pareto_size = np.array(pareto), len(pareto)

    m = gp.Model("mip1")

    x = m.addMVar(pareto_size, vtype=GRB.INTEGER)
    m.setObjective(pareto[:, 1] @ x, GRB.MINIMIZE)

    m.addConstr(x.sum() == workload, "c0")
    m.addConstr(pareto[:, 0] @ x <= ddl, "c1")

    m.optimize()

    for v in m.getVars():
        print('%s %g' % (v.VarName, v.X))

    print('Obj: %g' % m.ObjVal)

    return m.ObjVal


if __name__ == '__main__':

    pareto, _ = get_Pareto('CIFAR10.json')
    ddl, workload = 50, 50

    t0 = time()
    exploitOpt(pareto, ddl, workload)
    t1 = time()

    print(t1 - t0)
